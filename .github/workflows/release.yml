name: Release workflow

on:
  pull_request:
    branches: main

env:
  DOCKER_BASE_IMAGE: debian:buster-slim
  RUST_VERSION: rust:1.70.0

jobs:
  changes:
    runs-on: ubuntu-latest
    name: 'Detect changes'
    outputs:
      dockerfiles: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            recover-id-object/scripts/Dockerfile:
              - 'deps/concordium-rust-sdk/**'
              - 'recover-id-object/**'

  build-and-push:
    needs: [ changes ]
    if: needs.changes.outputs.dockerfiles != '[]'
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJSON(needs.changes.outputs.dockerfiles) }}
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Check out the repo
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: true
        build-args: |
          build_image=${{ env.RUST_VERSION }}
          base_image=${{ env.DOCKER_BASE_IMAGE }}
        tags: concordium/recover-id-object:latest
        cache-from: type=registry,ref=concordium/recover-id-object:latest
        cache-to: type=inline
