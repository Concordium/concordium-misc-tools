name: Publish a docker image for KPI-tracker to DockerHub.

on:
  push:
    tags:
      - notification-server/*.*.*

env:
  REGISTRY: docker.io
  IMAGE_NAME: notification-server
  RUST_VERSION: rust:1.74-buster

jobs:
  publish-docker-image:
    runs-on: ubuntu-latest
    #environment: testnet-deployments
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract version tag from Cargo.toml manifest.
        id: meta
        run: |
          export VERSION=$(yq .package.version notification-server/Cargo.toml)
          export FULL_IMAGE_TAG="${{ env.REGISTRY }}/concordium/$IMAGE_NAME:$VERSION"
          echo "::notice FULL_IMAGE_TAG=${FULL_IMAGE_TAG}"
          # Make sure the image does not exist. Abort if we can retrieve any metadata.
          if docker manifest inspect ${FULL_IMAGE_TAG} > /dev/null; then
             echo "::error ${FULL_IMAGE_TAG} already exists"
             exit 1
          elif [ ! "${{ github.ref_name }}" = "notification-server/${VERSION}" ]; then
             echo "::error Expected tag ${EXPECTED_TAG} does not match the version ${VERSION}."
             exit 1
          else
             # Store the full image tag into a tag variable for the following step.
             echo "tag=${FULL_IMAGE_TAG}" > "$GITHUB_OUTPUT"
          fi
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ./notification-server/scripts/Dockerfile
          push: true
          build-args: |
            build_image=${{ env.RUST_VERSION }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tag }}
