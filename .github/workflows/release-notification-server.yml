name: Publish Docker image for notification-server to DockerHub

on:
  push:
    branches:
      - main

  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: notification-server
  RUST_VERSION: rust:1.76-buster  # Define the Rust version here

jobs:
  publish-docker-image:
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(yq .package.version notification-server/Cargo.toml)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if tag exists
        id: tag_check
        run: |
          TAG="notification-server/${{ env.VERSION }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
            exit 0
          else
            echo "Tag $TAG does not exist."
            echo "tag_exists=false" >> $GITHUB_ENV
          fi

      - name: Create tag and release
        if: env.tag_exists != 'false'
        run: |
          TAG="notification-server/${{ env.VERSION }}"
          git tag "$TAG"
          git push origin "$TAG"
          gh release create "$TAG" --title "Release $TAG" --notes "Release of version $TAG"

      - name: Build and push Docker image
        if: env.tag_exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: notification-server/scripts/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/concordium/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          build-args: |
            build_image=${{ env.RUST_VERSION }}